# name: Postgres

# on: 
#   push:
#     branches: 
#       - postgres
#     paths-ignore:
#       - 'helm/Chart.yaml'

# jobs:

#   docker:
#     if: contains(github.event.head_commit.message, '[skip ci]') == false

#     runs-on: ubuntu-latest
    
#     services:
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_DB: mydb
#           POSTGRES_USER: myuser
#           POSTGRES_PASSWORD: mypassword
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     env:
#       DB_NAME: mydb
#       DB_USER: myuser
#       DB_PASSWORD: mypassword
#       DB_HOST: localhost
#       DB_PORT: 5432
#       # Optional: for Django settings.py
#       DATABASE_URL: postgres://myuser:mypassword@localhost:5432/mydb

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.12' 

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Create database
#         run: |
#           if [ ! -f db.sqlite3 ]; then
#             touch db.sqlite3
#           fi

#       - name: Run migrations
#         run: |
#           python3 manage.py makemigrations
#           python manage.py migrate

#       - name: Run tests
#         run: python manage.py test

#       - name: Get current version from Chart.yaml
#         id: get_version
#         run: |
#           VERSION=$(grep '^appVersion:' helm/Chart.yaml | awk '{ print $2 }')
#           echo "VERSION=$VERSION" >> $GITHUB_ENV
#           echo "Current version: $VERSION"

#       - name: Bump patch version
#         id: bump_version
#         run: |
#           OLD_VERSION=${{ env.VERSION }}
#           IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
#           PATCH=$((PATCH + 1))
#           NEW_VERSION="$MAJOR.$MINOR.$PATCH"
#           echo "New version: $NEW_VERSION"
#           # Replace version line in Chart.yaml
#           sed -i "s/^appVersion: .*/appVersion: $NEW_VERSION/" helm/Chart.yaml
#           echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
#       - name: Commit and push version bump
#         run: |
#           git config user.name "github-actions[bot]"
#           git config user.email "github-actions[bot]@users.noreply.github.com"

#           git add helm/Chart.yaml
#           git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || echo "No changes to commit"
#           git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
#           git push origin postgres
          


#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: mgrah/yum-book:${{ env.NEW_VERSION }}
    
name: Linters and Tests

on: 
  push:
    branches: 
      - '**'
    paths-ignore:
      - 'helm/Chart.yaml'
      - 'README.md'
      - '**/README.md'
      - 'Makefile'
jobs:

  linters-and-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies and linter
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8  
          
      - name: Run flake8
        run: flake8 . --exclude=venv,migrations --max-line-length=120

      - name: Create database if not exists
        run: |
          if [ ! -f db.sqlite3 ]; then
            touch db.sqlite3
          fi

      - name: Run migrations
        run: |
          python3 manage.py makemigrations
          python manage.py migrate

      - name: Run tests
        run: python manage.py test

  test-postgres:
    if: contains(github.event.head_commit.message, '[skip ci]') == false
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
      DJANGO_SETTINGS_MODULE: yum_book.settings
      POSTGRES: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' 

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run migrations and create a superuser
        run: |
          python3 manage.py makemigrations && \
          python manage.py migrate && \
          python create_superuser.py

      - name: Run tests
        run: python manage.py test
